package com.telran.practice.practice12;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.*;

public class Dictionary {

    public static void main(String[] args) {
//      2. –ò–º–µ–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–π —Ç–µ–∫—Å—Ç. –°–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –Ω–µ–º —Å–ª–æ–≤ —Å —á–∞—Å—Ç–æ—Ç–æ–π –∏—Ö —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.
//        –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –ø–æ —á–∞—Å—Ç–æ—Ç–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏ —Å–ª–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é).
        Map<String, Integer> dictionary = new HashMap<>();

        String text = getSomeText();
        Scanner scanner = new Scanner(text);

        while (scanner.hasNext()) {
            String word = scanner.next().toLowerCase();
            int count = dictionary.getOrDefault(word, 0);
            dictionary.put(word, ++count);
        }

        // IMPORTANT: a very dubious solution to the task ü´£‚ùì‚ùî
        List<Map.Entry<String, Integer>> entries = new ArrayList<>(dictionary.entrySet()); // O(n)
        entries.sort((entry1, entry2) -> entry2.getValue().compareTo(entry1.getValue())); // O(n * log n)

        System.out.println(entries);
    }

    public static String getSomeText() {
        try {
            HttpClient client = HttpClient.newHttpClient();

            HttpRequest request = HttpRequest.newBuilder()
                    .uri(new URI("https://www.omegle.com/"))
                    .GET()
                    .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            System.out.println("HTTP Status: " + response.statusCode());
            return response.body();
        } catch (Exception e) {
            return "";
        }
    }
}
